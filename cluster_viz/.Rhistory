ana_data2$valueBysize2 <- ana_data2$valueBysize2/10000
write.csv(ana_data2,paste0('Data/clust_data/',substr(file_names_[i],1,7),
'_r',radius,'.csv'),row.names = F)
}
for(i in c(16)){
data <- read.csv(paste0("Data/ggpa2/",file_names_[i]),stringsAsFactor=FALSE)
radius=1000
ana_data <- make_tidy(data,radius)
colnames_ <- colnames(ana_data)
colnames_[2] <- "asset_ID"
colnames(ana_data) <- colnames_
ana_data2 <- ana_data[!(ana_data$longitude==999),]
ana_data2$valueBysize1 <- ana_data2$valueBysize1/10000
ana_data2$valueBysize2 <- ana_data2$valueBysize2/10000
write.csv(ana_data2,paste0('Data/clust_data/',substr(file_names_[i],1,7),
'_r',radius,'.csv'),row.names = F)
}
str(data)
9498*18
for(i in c(18)){
data <- read.csv(paste0("Data/ggpa2/",file_names_[i]),stringsAsFactor=FALSE)
radius=1000
ana_data <- make_tidy(data,radius)
colnames_ <- colnames(ana_data)
colnames_[2] <- "asset_ID"
colnames(ana_data) <- colnames_
ana_data2$valueBysize1 <- ana_data2$valueBysize1/10000
ana_data2$valueBysize2 <- ana_data2$valueBysize2/10000
write.csv(ana_data2,paste0('Data/clust_data/',substr(file_names_[i],1,7),
'_r',radius,'.csv'),row.names = F)
}
file_names_ <- dir('Data/ggpa2')
source('make_data_for_clustering.R',encoding = "UTF-8")
for(i in c(18)){
data <- read.csv(paste0("Data/ggpa2/",file_names_[i]),stringsAsFactor=FALSE)
radius=1000
ana_data <- make_tidy(data,radius)
colnames_ <- colnames(ana_data)
colnames_[2] <- "asset_ID"
colnames(ana_data) <- colnames_
ana_data2$valueBysize1 <- ana_data2$valueBysize1/10000
ana_data2$valueBysize2 <- ana_data2$valueBysize2/10000
write.csv(ana_data2,paste0('Data/clust_data/',substr(file_names_[i],1,7),
'_r',radius,'.csv'),row.names = F)
}
for(i in c(18)){
data <- read.csv(paste0("Data/ggpa2/",file_names_[i]),stringsAsFactor=FALSE)
radius=1000
ana_data <- make_tidy(data,radius)
colnames_ <- colnames(ana_data)
colnames_[2] <- "asset_ID"
colnames(ana_data) <- colnames_
ana_data2$valueBysize1 <- ana_data2$valueBysize1/10000
ana_data2$valueBysize2 <- ana_data2$valueBysize2/10000
write.csv(ana_data2,paste0('Data/clust_data/',substr(file_names_[i],1,7),
'_r',radius,'.csv'),row.names = F)
}
kk <- read.csv('Data/clust_data/경기도\ 남양주시_r1000.csv')
getwd()
kk <- read.csv('Data/clust_data/경기도\ 남양주_r1000.csv')
str(kk)
kk$latitude<777
sub <- kk[kk$longitude<777,]
file_names_ <- dir('Data/ggpa2')
source('make_data_for_clustering.R',encoding = "UTF-8")
for(i in c(18)){
data <- read.csv(paste0("Data/ggpa2/",file_names_[i]),stringsAsFactor=FALSE)
radius=1000
ana_data <- make_tidy(data,radius)
colnames_ <- colnames(ana_data)
colnames_[2] <- "asset_ID"
colnames(ana_data) <- colnames_
ana_data2$valueBysize1 <- ana_data2$valueBysize1/10000
ana_data2$valueBysize2 <- ana_data2$valueBysize2/10000
write.csv(ana_data2,paste0('Data/clust_data/',substr(file_names_[i],1,7),
'_r',radius,'.csv'),row.names = F)
}
file_path = "Data/public_fc/gov/gg_gov.csv"
apmm_nv_land <- read.csv('Data/APMM_NV_LAND/APMM_NV_LAND.txt',sep = '|',
stringsAsFactors = FALSE)
apmm_nv_land <- read.csv('Data/APMM_NV_LAND/APMM_NV_LAND.txt',sep = '|',
stringsAsFactors = FALSE)
apmm_nv_land <- read.csv('Data/APMM_NV_LAND/APMM_NV_LAND.txt',sep = '|',
stringsAsFactors = FALSE)
data <- get_name_addr(file_path)
get_name_addr <- function(path="Data/public_fc/gov/gg_gov.csv"){
# dataset에서 장소이름과 주소만 반환
# Param
# -----
# file-path
#
# Returns
# -------
# dataframe
#   with name and address columns
data <- read.csv(path,stringsAsFactors = FALSE)
data <- subset(data,select=c(name,address))
return(data)
}
make_sgg <- function(data){
# 주소에서 시군구만 선택해 character로 바꿔줍니다.
# Param
#-------
# dataframe: address column이 있어야함
#
# Returns
# --------
# character vactor: 본번 부번이 빠진
addr <- strsplit(data$address," ")
c_lists_ <- lapply(addr,function(x) {
result <- c()
for(i in 1:length(x)){
if(!grepl("[0-9]|[(]|[)]",x[i])){
result <- paste(result,x[i])
}
}
return(result)
})
return(trimws(unlist(c_lists_),"left"))
}
make_bobubn <- function(data){
# 주소에서 본번과 부번 반환
# Param
# ------
# dataframe: address column이 있어야함
#
# Returns
#--------
# list: 본번 부번이 있는 list / 번지가 없으면 "번지없음"으로 표시
addr <- strsplit(data$address," ")
bobubn <- lapply(addr,function(x){
result <- c()
for(i in 1:length(x)){
if(grepl("^[0-9]+(-)?[0-9]+번지$",x[i]))
result <- paste(result,x[i])
}
return(result)
})
bobubn <- lapply(bobubn,function(x){
if(is.null(x))
x <- "None"
else{
x <- unlist(strsplit(x,"번지"))
x <- unlist(strsplit(x,"-"))
}
})
# bobubn <- lapply(bobubn,function(x){
#     if(is.null(x))
#         x<-"None"
#     else
#         x<-trimws(x,"left")})
# bobubn <- unlist(bobubn)
# result <- list()
# for(i in 1:length(bobubn)){
#     if(bobubn[i] != "None"){
#         a <- bobubn[i]
#         a <- substr(a,1,(stringr::str_length(a)-2))
#         a <- strsplit(a,"-")
#     }
#     else{
#         a <- "None"
#     }
#     result[[i]] <- a
# }
return(bobubn)
}
sgg_cd <- read.csv('Data/SGG_CD.txt',sep='\t',stringsAsFactors = FALSE)
sgg_cd <- read.csv('Data/SGG_CD.txt',sep='\t',stringsAsFactors = FALSE)
colnames(sgg_cd) <- c('sgg_cd','address','isExist')
get_sgg_code <- function(sgg){
# 시군구명을 입력하면 코드로 반환
# Param
# ------
# character: address
#
# Returns
# -------
# sgg code: int / 0: error
if(sgg %in% sgg_cd$address)
return(sgg_cd[sgg == sgg_cd$address,]$sgg_cd)
else
return(0)
}
data <- get_name_addr(file_path)
data <- read.csv(file_path)
str(data)
colnames(data)[3,5] <- c(name,address)
colnames(data)[3,5] <- c('name','address')
colnames <- colnames(data)
colnames[2,5] <- c("name","address")
colnames
colnames[c(2,5)] <- c("name","address")
colnames(data)[c(2,5)] <- c("name","address")
str(data)
data <- read.csv(file_path)
colnames(data)[c(3,6)] <- c("name","address")
str(data)
write.csv(data,file = file_path,raw.names = FALSE)
write.csv(data,file = file_path,rawnames = FALSE)
write.csv(data,file = file_path,raw.name = FALSE)
?write.csv
write.csv(data,file = file_path,row.names = FALSE)
data <- get_name_addr(file_path)
origin_data <- read.csv(file_path,stringsAsFactors = FALSE)
data <- get_name_addr(file_path)
sggs_ <- make_sgg(data)
bobubns_ <- make_bobubn(data)
bobubns_
sgg_codes_ <- c()
for(i in 1:length(sggs_)){
sgg <- get_sgg_code(sggs_[i])
sgg_codes_[i] <- sgg
}
sgg_codes_
pnus_ <- make_pnu(sgg_codes_,bobubns_)
make_pnu <- function(sgg_codes_,bobubns_){
sub1 <- as.character(sgg_codes_)
sub2 <- c()
sub3 <- c()
for(i in 1:length(bobubns_)){
if(length(bobubns_[[i]]) > 1){
aa <- trimws(bobubns_[[i]][1],"left")
bb <- bobubns_[[i]][2]
if(stringr::str_length(aa)<4){
zeros <- stringr::str_dup("0",4-stringr::str_length(aa))
aa <- paste(paste0(zeros),aa,sep="")
}
if(stringr::str_length(bb)<4){
zeros <- stringr::str_dup("0",4-stringr::str_length(bb))
bb <-paste(zeros,bb,sep="")
}
}else if(bobubns_[[i]]=="None"){
aa <- "0000";bb<-"0000"
}else{
aa <- trimws(bobubns_[[i]],"left")
if(stringr::str_length(aa)<4){
zeros <- stringr::str_dup("0",4-stringr::str_length(aa))
aa <- paste(zeros,aa,sep="")
}
bb <- "0000"
}
sub2 <- c(sub2,aa)
sub3 <- c(sub3,bb)
}
result <- data.frame(sub1,sub2,sub3,stringsAsFactors = FALSE)
return(result)
}
pnus_ <- make_pnu(sgg_codes_,bobubns_)
pnus_
str(pnus_)
variable_names_ <- c('PNILP','PAREA','JIMOK','SPFC1','SPFC2','LAND_USE',
'GEO_HL','GEO_FORM','ROAD_SIDE')
result_ <- data.frame()
str(apmm_nv_land)
pnus_$sub1=="0"
pnus_$sub1[1]=="0"
PNU <- apmm_nv_land$PNU
str(apmm_nv_land)
range(apmm_nv_land$LAND_GBN)
count(apmm_nv_land$LAND_GBN==0)
sum(apmm_nv_land$LAND_GBN==0)
sum(apmm_nv_land$LAND_GBN==1)
sum(apmm_nv_land$LAND_GBN==2)
sum(apmm_nv_land$LAND_GBN==3)
sum(apmm_nv_land$LAND_GBN==4)
sum(apmm_nv_land$LAND_GBN==5)
sum(apmm_nv_land$LAND_GBN==6)
sum(apmm_nv_land$LAND_GBN==7)
sum(apmm_nv_land$LAND_GBN==8)
sum(apmm_nv_land$LAND_GBN==9)
sum(apmm_nv_land$LAND_GBN==10)
i=1
my_pnu <- paste0(pnus_[i]$sub1,j,pnus_[i]$sub2,pnus_[i]$sub3)
j=1
my_pnu <- paste0(pnus_[i]$sub1,j,pnus_[i]$sub2,pnus_[i]$sub3)
my_pnu
my_pnu <- paste0(pnus_$sub1[i],j,pnus_$sub2[i],pnus_$sub3[i])
vars <- apmm_nv_land[apmm_nv_land$PNU==my_pnu,variable_names_]
vars
variable_names_ <- c('PNU','PNILP','PAREA','JIMOK','SPFC1','SPFC2','LAND_USE',
'GEO_HL','GEO_FORM','ROAD_SIDE')
vars <- apmm_nv_land[apmm_nv_land$PNU==my_pnu,variable_names_]
vars
i=2
my_pnu <- paste0(pnus_$sub1[i],j,pnus_$sub2[i],pnus_$sub3[i])
j=4
my_pnu <- paste0(pnus_$sub1[i],j,pnus_$sub2[i],pnus_$sub3[i])
vars <- apmm_nv_land[apmm_nv_land$PNU==my_pnu,variable_names_]
str(vars)
vars <- rep("0",length(variable_names_))
j=1
vars <- apmm_nv_land[apmm_nv_land$PNU==my_pnu,variable_names_]
my_pnu <- paste0(pnus_$sub1[i],j,pnus_$sub2[i],pnus_$sub3[i])
vars <- apmm_nv_land[apmm_nv_land$PNU==my_pnu,variable_names_]
for(i in 1:nrow(pnus_)){
if(pnus_$sub1[i]!="0"){
j <- 0
while(j < 10){
my_pnu <- paste0(pnus_$sub1[i],j,pnus_$sub2[i],pnus_$sub3[i])
vars <- apmm_nv_land[apmm_nv_land$PNU==my_pnu,variable_names_]
if(nrow(vars)!=0)
break
j <- j + 1
}
if(nrow(vars)==0)
vars <- rep("0",length(variable_names_))
}else{
vars <- rep("0",length(variable_names_))
}
result_ <- rbind(result_,vars)
}
unique(result_$PNU)
sum(result_$PNU=="0")
data <- data.frame(address="서울특별시 영등포구 여의도동 13-16번지")
make_sgg <- function(data){
# 주소에서 시군구만 선택해 character로 바꿔줍니다.
# Param
#-------
# dataframe: address column이 있어야함
#
# Returns
# --------
# character vector: 본번 부번이 빠진
addr <- strsplit(data$address," ")
c_lists_ <- lapply(addr,function(x) {
result <- c()
for(i in 1:length(x)){
if(!grepl("[0-9]|[(]|[)]",x[i])){
result <- paste(result,x[i])
}
}
return(result)
})
return(trimws(unlist(c_lists_),"left"))
}
sggs_ <- make_sgg(data)
sggs_
sggs_ <- make_sgg(data)
data
addr <- strsplit(data$address," ")
data <- data.frame(address="서울특별시 영등포구 여의도동 13-16번지",stringsAsFactors=FALSE)
data <- data.frame(address="서울특별시 영등포구 여의도동 13-16번지",stringsAsFactors=FALSE)
sggs_ <- make_sgg(data)
bobubns_ <- make_bobubn(data)
sgg_codes_ <- c()
for(i in 1:length(sggs_)){
sgg <- get_sgg_code(sggs_[i])
sgg_codes_[i] <- sgg
}
pnus_ <- make_pnu(sgg_codes_,bobubns_)
pnus_
result_ <- data.frame()
for(i in 1:nrow(pnus_)){
vars <- c()
if(pnus_$sub1[i]!="0"){
j <- 0
while(j < 10){
my_pnu <- paste0(pnus_$sub1[i],j,pnus_$sub2[i],pnus_$sub3[i])
vars <- apmm_nv_land[apmm_nv_land$PNU==my_pnu,variable_names_]
if(nrow(vars)!=0)
break
j <- j + 1
}
if(nrow(vars)==0)
vars <- rep("0",length(variable_names_))
}else{
vars <- rep("0",length(variable_names_))
}
result_ <- rbind(result_,vars)
}
result_
data <- data.frame("경기도 수원시 영통구 영통동 945-2번지",stringsAsFactors=FALSE)
data <- data.frame("경기도 수원시 영통구 영통동 945-2번지",stringsAsFactors=FALSE)
sggs_ <- make_sgg(data)
data
data <- data.frame(address = "경기도 수원시 영통구 영통동 945-2번지",stringsAsFactors=FALSE)
sggs_ <- make_sgg(data)
bobubns_ <- make_bobubn(data)
sgg_codes_ <- c()
for(i in 1:length(sggs_)){
sgg <- get_sgg_code(sggs_[i])
sgg_codes_[i] <- sgg
}
pnus_ <- make_pnu(sgg_codes_,bobubns_)
pnus_
result_ <- data.frame()
for(i in 1:nrow(pnus_)){
vars <- c()
if(pnus_$sub1[i]!="0"){
j <- 0
while(j < 10){
my_pnu <- paste0(pnus_$sub1[i],j,pnus_$sub2[i],pnus_$sub3[i])
vars <- apmm_nv_land[apmm_nv_land$PNU==my_pnu,variable_names_]
if(nrow(vars)!=0)
break
j <- j + 1
}
if(nrow(vars)==0)
vars <- rep("0",length(variable_names_))
}else{
vars <- rep("0",length(variable_names_))
}
result_ <- rbind(result_,vars)
}
result_
rm(list=ls())
source('make_variables.R')
source('make_variables.R',encoding="UTF-8")
res <- make_variables(file_path)
res <- make_variable(file_path)
View(get_variables)
res <- get_variables(file_path)
origin_data <- read.csv(file_path,stringsAsFactors = FALSE)
origin_data
str(origin_data)
colnames(origin_data)
res <- get_variables(file_path)
source('make_variables.R',encoding="UTF-8")
res <- get_variables(file_path)
str(res)
View(res)
range(apmm_nv_land$STDMT)
sum(unique(apmm_nv_land$PNU))
count(unique(apmm_nv_land$PNU))
counts(unique(apmm_nv_land$PNU))
str(unique(apmm_nv_land$PNU))
aa <- unique(res$PNU)
res[aa==res$PNU,]
source('make_variables.R',encoding="UTF-8")
res[aa %in% res$PNU,]
result_ <- data.frame()
for(i in 1:length(aa)){
if(nrow(res[aa[i]==res$PNU,])>1)
result_ <- rbind(result_,res[aa[i]==res$PNU,])
}
result_
View(result_)
file_path
d <- read.csv(file_path)
colnames(d)
colnames(d)["logitude"]<-"longitude"
colnames(d)[c("logitude")]<-c("longitude")
colnames(d)[c(8)]<-c("longitude")
colnames(d)
source('make_variables.R',encoding="UTF-8")
res <- get_variables(file_path,variable_names_ = c('PNU',,'PNILP','PAREA','JIMOK',
'SPFC1','SPFC2','LAND_USE','GEO_HL',
'GEO_FORM','ROAD_SIDE'))
str(res)
str(res[res$PNU=="0",])
str(res[res$PNU!="0",])
res <- get_variables(file_path,variable_names_ = c('PNU','PNILP','PAREA','JIMOK',
'SPFC1','SPFC2','LAND_USE','GEO_HL',
'GEO_FORM','ROAD_SIDE'))
str(res)
data <- read.csv(file_path)
str(data)
colnames(data)[c(8)]<-"longitude"
str(data)
write.csv(data,file_path,row.names = FALSE)
res <- get_variables(file_path,variable_names_ = c('PNU','PNILP','PAREA','JIMOK',
'SPFC1','SPFC2','LAND_USE','GEO_HL',
'GEO_FORM','ROAD_SIDE'))
str(res)
install.packages('shiny')
install.packages('leaflet')
library(shiny)
library(leaflet)
install.packages('installr');library(installr)
updateR()
library(shiny)
install.packages('shiny')
install.packages('leaflet')
install.packages('dplyr')
suwon <- read.csv('Data/clust_data/경기도 수원시_r1000.csv',stringsAsFactors=F)
str(suwon)
sum(is.na(suwon$latitude))
suwon <- suwon %>% select(asset_ID,재산명칭,longitude,latitude,
Land_size= size_factor,Land_value = valueBysize1)
library(dplyr)
suwon <- suwon %>% select(asset_ID,재산명칭,longitude,latitude,
Land_size= size_factor,Land_value = valueBysize1)
str(suwon)
library(RColorBrewer)
library(dplyr)
data <- read.csv('Data/clust_data/경기도 수원시_r1000.csv')
str(data)
suwon_r1000 <- read.csv('Data/suwon_clustered.csv',stringsAsFactors = F)
setwd('cluster_viz')
suwon_r1000 <- read.csv('Data/suwon_clustered.csv',stringsAsFactors = F)
suwon_r500 <- read.csv('Data/suwon_r500_clustered.csv',stringsAsFactors = F)
rm(list=ls())
suwon_r1000 <- read.csv('Data/suwon_clustered.csv',stringsAsFactors = F)
suwon_r500 <- read.csv('Data/suwon_r500_clustered.csv',stringsAsFactors = F)
thunder_api_key <- read.csv('Data/api_keys.txt',
stringsAsFactors = F)$thunderforest
data <- read.csv('Data/Suwon_r500',stringsAsFactors = F)
data <- read.csv('Data/Suwon_r500.csv',stringsAsFactors = F)
str(data)
data <- data[data$Land_Value_bySize!=Inf,]
cluster <- read.csv('Data/suwon_r500_clusterd.csv')
cluster <- read.csv('Data/suwon_r500_clustered.csv')
str(cluster)
data <- cbind(data,cluster$cluster)
str(data)
colnames(data)[23] <- "cluster"
str(data)
longitude <- cluster$longitude
latitude <- cluster$latitude
data <- cbind(data,longitude,latitude)
str(data)
write.csv(data,'Data/suwon_r500_clustered.csv',row.names = F)
